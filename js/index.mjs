// https://dept.dokkyomed.ac.jp/dep-m/macro/mammal/en/genus_list.html
// copy([...document.querySelectorAll(".TaxonSci>a")].map(x=>x.innerText))
const genuses = [
  "Acomys",
  "Aepyceros",
  "Aepyprymnus",
  "Agouti",
  "Ailurus",
  "Allactaga",
  "Alopex",
  "Alouatta",
  "Antidorcas",
  "Antilocapra",
  "Antilope",
  "Aonyx",
  "Aotus",
  "Aplodontia",
  "Arctocephalus",
  "Atelerix",
  "Ateles",
  "Bassariscus",
  "Bos",
  "Boselaphus",
  "Brachyteles",
  "Bradypus",
  "Callicebus",
  "Callithrix",
  "Callosciurus",
  "Camelus",
  "Canis",
  "Cannomys",
  "Capra",
  "Capricornis",
  "Castor",
  "Cavia",
  "Cebuella",
  "Cebus",
  "Cercocebus",
  "Cercopithecus",
  "Cervus",
  "Chinchilla",
  "Choloepus",
  "Coendou",
  "Colobus",
  "Cricetomys",
  "Cricetus",
  "Crocidura",
  "Crocuta",
  "Cynictis",
  "Cynocephalus",
  "Cynomys",
  "Cynopterus",
  "Dactylopsila",
  "Dasyprocta",
  "Dasypus",
  "Dasyuroides",
  "Didelphis",
  "Dinomys",
  "Dolichotis",
  "Dryomys",
  "Dusicyon",
  "Echinops",
  "Eidolon",
  "Elaphodus",
  "Elephas",
  "Ellobius",
  "Enhydra",
  "Epomophorus",
  "Equus",
  "Erethizon",
  "Erinaceus",
  "Erythrocebus",
  "Euphractus",
  "Felis",
  "Galago",
  "Genetta",
  "Giraffa",
  "Glirulus",
  "Gorilla",
  "Gulo",
  "Hemicentetes",
  "Hemiechinus",
  "Hippopotamus",
  "Hippotragus",
  "Homo",
  "Hyaena",
  "Hydrochaerus",
  "Hylobates",
  "Hystrix",
  "Ictonyx",
  "Jaculus",
  "Lagenorhynchus",
  "Lagidium",
  "Lagostomus",
  "Lagothrix",
  "Lama",
  "Lemur",
  "Leontopithecus",
  "Lepus",
  "Loris",
  "Macaca",
  "Macropus",
  "Macroscelides",
  "Mandrillus",
  "Marmota",
  "Martes",
  "Mayailurus",
  "Meles",
  "Mephitis",
  "Microtus",
  "Miopithecus",
  "Mogera",
  "Muntiacus",
  "Mustela",
  "Myocastor",
  "Myrmecophaga",
  "Nandinia",
  "Nannospalax",
  "Nasua",
  "Neofelis",
  "Nyctereutes",
  "Nycticebus",
  "Ochotona",
  "Ondatra",
  "Oryctolagus",
  "Otocyon",
  "Otolemur",
  "Ovis",
  "Paguma",
  "Pan",
  "Panthera",
  "Papio",
  "Paradoxurus",
  "Paraxerus",
  "Pedetes",
  "Perodicticus",
  "Petaurista",
  "Petaurus",
  "Phacochoerus",
  "Phascolarctos",
  "Philander",
  "Phoca",
  "Pithecia",
  "Pongo",
  "Potos",
  "Praomys",
  "Presbytis",
  "Procavia",
  "Procolobus",
  "Procyon",
  "Psammomys",
  "Pseudorca",
  "Pteromys",
  "Pteropus",
  "Pygathrix",
  "Rangifer",
  "Rattus",
  "Rhombomys",
  "Rousettus",
  "Saguinus",
  "Saimiri",
  "Sarcophilus",
  "Sciurus",
  "Selenarctos",
  "Setifer",
  "Spermophilus",
  "Spilogale",
  "Stenella",
  "Suricata",
  "Sus",
  "Sylvilagus",
  "Tamandua",
  "Tamias",
  "Tamiasciurus",
  "Tamiops",
  "Tapirus",
  "Tarsius",
  "Tayassu",
  "Tenrec",
  "Theropithecus",
  "Thryonomys",
  "Tragelaphus",
  "Trichosurus",
  "Trogopterus",
  "Tupaia",
  "Tursiops",
  "Urotrichus",
  "Varecia",
  "Viverra",
  "Vulpes",
  "Wallabia",
  "Zalophus",
];
const GENUS_LENGTH = genuses.length;

const handleRequest = async (request) => {
  const url = new URL(request.url);
  try {
    const [,app, ...params] = url.pathname.split("/");
    switch (app) {
      case "genus":
        const genus = genuses[Math.floor(Math.random * GENUS_LENGTH)];
        return new Response(genus, {
          headers: {
            "Content-Type": "text/plain",
            ["x-source"]: url.host,
          },
        });
      case "bytes":
        const size = params[0] || 1;
        return new Response(randomBytes(size), {
          headers: {
            "Content-Type": "application/octet-stream",
            "Content-Disposition": `attachment; filename="${size}.bin"`,
            ["x-source"]: url.host,
          },
        });
      default:
        return new Response(`Not Found: ${url.pathname}`, {
          status: 404,
          headers: {
            "Content-Type": "text/plain",
            ["x-source"]: url.host,
          },
        });
    }
  } catch ({ message }) {
    return new Response(`Server Error: ${message}`, {
      status: 500,
      headers: {
        "Content-Type": "text/plain",
        ["x-source"]: url.host,
      },
    });
  }

  const bytesLength = Number(url.pathname.split("/")[1]) || 1;
};
addEventListener("fetch", (event) => {
  event.respondWith(handleRequest(event.request));
});
